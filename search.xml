<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[这个blog 你需要知道的]]></title>
      <url>http://blog.zhinian.info/2016/12/16/blog/</url>
      <content type="html"><![CDATA[欢迎来到这里 😊此处是何方神圣?&emsp;&emsp;╮(╯▽╰)╭ 此处只是一个前端小白自学之路的一个记录之地. 于2016年12月开启. 有一朝没一夕的更新着, 有着自己在FreeCodeCamp上学习的笔记, 有着自己收集的干货, 有着自己写的一些浅显易懂的教程. 还有一些随笔随记… 关于Freecodecamp 简称FCC, 官方英文网址: https://www.freecodecamp.com/ 官方中文网址: https://www.freecodecamp.cn/ 是一个闯关模式, 从基础开始学习前端的网站. 详情点击这里. Fcc须知. 关于干货 正在编译中….. 关于教程 我本着读者零基础看教程的心态, 尽量给每个步骤都配图, 配文字, 并且把我能知道的坑, 简单明了的说一遍, 然后你可以选择踩或不踩. 待续….]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一次晚归夜宿与早起日出]]></title>
      <url>http://blog.zhinian.info/2016/12/12/night/</url>
      <content type="html"><![CDATA[&emsp;&emsp;出了地铁站，时间已是23：23分，回到宿舍的14分钟被缩减一半。也是好饿，又闻到周围飘来的饭香，心一横，翻个墙回去吧！ 下午去练车，科目三，九点的时候教练说去看考场，与另外两个学员拼车去了。地点实在是感人，位处深圳湾旁边。到了地方就已经近九点四十了，看考场，ok后到地铁站时候，就已经十点四十了。 宿舍， 翻墙这两个名词联系起来检索，我能想到的就是我班里一个80+kg的同学，他说过的一句话：“翻墙啊~ 如履平地” 顿时被我铭记在心。 宵夜麻辣烫啊，夜里搭配。 &emsp;&emsp;吃饱了，走回宿舍楼下，十二点十几分，本欲“如履平地”，却发现宿管还没走，这就尴尬了。没事，我等。&emsp;&emsp;&emsp;&emsp;&emsp;十二点四十，我等。&emsp;&emsp;&emsp;&emsp;&emsp;一点十分，我等。 &emsp;&emsp;此时的状态，好困，好渴，又有冷风吹。让室友送下来一杯热水，一口气喝完，给个枕头我能在长椅上睡着。就不管蚊子咬了我想宿管也是蛮拼的，一点半总要走了吧，毕竟守了两个小时了。 一点半，我等。等个啥… 一个朋友说，这宿管他夜班！夜班！班！感情我刚刚就是自演自作。嗯…… &emsp;朋友支个招，教学楼有教师休息室，门不关，里面有床，下楼顺便把身份证也给我了…… 我看了一眼两个聊天聊的特别嗨的宿管，面无表情的走了，当然，他们是没看见我的。 &emsp;&emsp;北5教室休息室，门关着，换个姿势再开一次，嗯还是关着，刚走两步，里面出来人了，被告知已经有人了。 Biu biu biu这时特么灵机一动，学校搞对称，南边应该也有，嗯果然有，但全是椅子，凑合着吧~ 毕竟两点了。毕竟穷，没一百五睡一晚。毕竟不喜欢烟味，没去网吧。当然，那是因为有这个休息室。 夜里辗转反侧好几次，夜里好像打死蚊子一只，然而这一只 只是一群蚊子里面的一个罢了。 六点半闹钟，起来，离开教学楼，刚好看到日出。 真的挺美的。也是因为早起的一次日出，促成了一口气写完这个晚归夜宿与早起日出的经历。 &emsp;&emsp;生活应当多彩, 就像是 你所看到的美好的部分和失落的世界. 交替循环. &emsp;&emsp;而且, 在你越是忽视的时候, 越是令人惊讶.]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github 的注册与使用教程以及github page (二)]]></title>
      <url>http://blog.zhinian.info/2016/12/08/Github-2/</url>
      <content type="html"><![CDATA[须知: 本文图片较多, 所以我用了webp格式的图来加载, 以防止出现网速不好者, 要等待一会~ 还有就是图片作用就是让你确认你的界面应该是怎么样的. 我也有文字说明的. (新加) 难过, 移动端暂时不支持webp格式的图片, 我在找到解决的方法之前, 还是先用jpg格式的. 本文是从小白开始的教程, 大牛勿喷. 再说. 这是我第一次写, 难免过于幼稚. 体谅哈~ 左侧有目录, 可以跳转查看. 使用Github来托管你的代码 第一部分 认识Github和Github Page (一) 在第一部分中, 我简单的写了Github的注册, 建仓库, 初次使用Github page. 还是用的网页上的create new file 在实际生产中, 我们肯定不可能是那样的写文件吧, 所以. 这个博文就是教你如何上传代码文件的 Github 的客户端使用 当今盛行的代码托管服务平台. 而我们作为一个程序员, 岂有弃之不用之理~ 好绕哈哈. 下面我就直接进入主题 客户端的使用. 分别有Mac端 和 windows端 的使用. 客户端是简单的操作, 适合新手. Mac客户端下载与使用 官网下载地址: https://desktop.github.com/ 如果网速慢, 可以在我的网盘下载. 链接: http://pan.baidu.com/s/1i4B4tzZ 密码: gjpy 安装并登录客户端 快捷键 command + , 打开客户端的设置. 点击 Accounts 然后 sign in 你的Github账号. 克隆仓库 登陆成功后, 在客户端的左上角点击 + 图标, 在弹出来的框框中, 有三个选项: Add Create Clone, 这里我们需要点击Clone. 这时会出来你Github账号上, 所有的仓库. 你需要clone哪个, 就点击仓库名字, 右下角的按钮就亮了. click it 弹出clone选项, 你选择好文件夹就可以了. 写代码咯 你想托管在Github平台的代码放在你克隆到本地的仓库下面就好了, 然后接着下一步, push你的代码吧. 这里 提交代码到Github 打开客户端. 点击左侧你要同步的仓库 当你本地的代码与网页上的相比, 有变动的时候, 会显示有多少个 changes . 在changes下, 在你的头像旁边, 有一个输入框, summary(描述) 输入你为这一次提交的说明. 这个是必须的 你的说明, 如果出现空格, 请用 “” 把说明包含起来 ​ 输入完上述的summary后, 下面的 Commit to master 就可以点击了 click it 这时候你已经完成了90%了, 最后一步就是点击右上角黑色框中的 Sync . 等待上传成功吧. 去Github官网上, 登录你的账号, 查看你的代码吧. 啊哈~ Windows客户端下载与使用 官网下载地址: https://desktop.github.com/ 如果网速慢, 可以在我的网盘下载. 链接: 命令行的使用 Git 命令行是轻松方便的一个方法, 它舍去了鼠标的点来点去, 舍去了UI界面, 用最简单的一行行命令轻松完成clone commit push 等等, 将你的代码从本地托管到Github上 Mac下的git命令行终端Windows下的git命令行]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github 的注册与使用教程以及github page (一)]]></title>
      <url>http://blog.zhinian.info/2016/12/08/Github-1/</url>
      <content type="html"><![CDATA[须知: 本文图片较多, 所以我用了webp格式的图来加载, 以防止出现网速不好者, 要等待一会~ 还有就是图片作用就是让你确认你的界面应该是怎么样的. 我也有文字说明的. (新加) 难过, 移动端暂时不支持webp格式的图片, 我在找到解决的方法之前, 还是先用jpg格式的. 本文是从小白开始的教程, 大牛勿喷. 再说. 这是我第一次写, 难免过于幼稚. 体谅哈~ 左侧有目录, 可以跳转查看. 认识Github和Github Page 啰嗦的第一段, 已经了解的可以左侧目录栏跳过啦~ GitHub是一个通过Git进行版本控制的软件源代码托管服务，由GitHub公司开发并运营. 截止到2015年，GitHub已经有超过九百万注册用户和2110万代码库。事实上已经成为了世界上最大的代码存放网站和开源社区。 GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，但是付费账户还可以创建私有的代码仓库。 Github还有一个github page功能. 从而建立一个属于你自己的网站. 并且, 它是免费又快速的. Github Page还可以自定义域名, 从而让你更加的与众不同. 出色于你的努力. Are you ready? Github 注册 首先, 我们应该打开github官网袄~ https://github.com/ 当然, 已经注册过的 可以跳过往下看~ 注册页面网址: https://github.com/join?source=header 第一步 填写用户名, 注册邮箱(邮箱要正确,且你要知道密码袄, 因为后面需要验证), 填写登录密码. 第二步 选择你的套餐 第三步 填写你的信息(这个是可选的) 你也可以跳过. 验证邮箱 接着上一步, 第三步ok后, 点击 start a project. 它会让你验证邮箱. 然后发送一个邮件到你的邮箱里, 你去邮箱验证就好啦~ 后期你还可以在右上角你的头像那里点击, 弹出的下拉菜单倒数第二个 setting 菜单. 这个是设置你的github功能的,里面你还可以添加邮箱啦, 更改密码啦, 更改信息啦. 创建仓库第一步点击右上角的 + , 在弹出的下拉菜单里, 点击 new repository . 仓库的名字一定要看清,填好袄~ 还有, 有个需要打钩的地方, 也顺手打了吧, 这样会方便以后, 尽管后面你还可以自己创建. 我这里为了下面的演示Pages 所以就创建了一个.github.io格式的仓库. 第二步 (可选)体验github page的魅力吧! 点击 create new file , 进入后, 注意创建的文件的名字! 注意创建的文件的名字! 注意创建的文件的名字! 内容你可以仿照我的敲一下, 也可以把你自己写过的静态单个html文件的内容复制粘贴过来. PS: 单个html的意思是指你页面中的js啊,css啊,都在一个.html里面, 这样网页才完整. 不然就有些样式和脚本就不会出现啦~. ok后, 在页面的最下方, 除了点击那个绿色的按钮 commit new file 其他什么都不要点, 不用填, 就可以了. 好了, 现在深呼吸一下(好累的), 在浏览器里打开一个新的标签页. 输入地址: https://你的用户名.github.io 回车后, 见证你自己的奇迹吧~ 如果有人真的很相信我, 就在地址栏输入https://你的用户名.github.io , 那我是冷漠呢还是高兴呢. 好难选诶]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fcc --- Steamroller]]></title>
      <url>http://blog.zhinian.info/2016/12/05/steamroller/</url>
      <content type="html"><![CDATA[题目描述 对嵌套的数组进行扁平化处理。你必须考虑到不同层级的嵌套。如果你被卡住了， ​ 记得开大招 Read-Search-Ask。尝试与他人结伴编程、编写你自己的代码。 提供的资源: Array.isArray() 往下继续之前, 希望你花两分钟看看这个Fcc 须知题目解析理解题意 何为扁平化处理. 如steamroller([[[&quot;a&quot;]], [[&quot;b&quot;]]]) 应该返回 [&quot;a&quot;, &quot;b&quot;] 就是把数组中空的值, 嵌套的值等等最终返回一个只有一层的数组. 既完成了Fcc的挑战. 前期思考 数组遍历, 需要使用什么方法. 不止一个哦. 除了for循环 检查这个元素, 做判断嘛. 数组判断, 是数组, 要继续扁平化, 可以跳到思考 1 需要用到递归或者另一种多维度数组的处理方法. 不是数组, 添加到结果数组中. *这里的结果数组需要在函数内定义还是全局定义呢? 见下面同学示例. 编写代码 , 想好了, 那就实践吧, 即使出现了bug. ​ 代码示范一个同学的代码示例 返回结果是 但并没有通过这道题. 为什么呢? 在题中调用两次steamroller后, 结果却不是我们想要的 [&quot;a&quot;, &quot;b&quot;] 而是[1,2,3,4,&quot;a&quot;, &quot;b&quot;] 为什么会把上一次调用的结果也push到了 结果数组中了? 代码分析原因就是, 在上面那个同学的代码中, 他的结果数组: newArr是在全局定义的! 这也就导致, 他的结果数组保存着所有的调用steamroller函数的值. 所以这样当然不会通过测试啦~ 那机智如你会想到把结果数组定义到函数内, 但是当我们要扁平化的是多维数组时, 它就出现了只有第一个元素的尴尬现象. What the hall??? so, 这个时候, 你可以了解 javascript的闭包函数了, 同学们点击左侧链接, 跳转, 查看什么是闭包及其原理和应用. 一定去看袄. 以及, 这一题我也用了闭包, 在看完阮一峰老师的闭包讲解后, 可以先尝试着修改代码. 也可以查看我的, 分析示例. 我有写注释. 据说代码写注释是一个好习惯, 请问这个据说对不对 &gt;.&lt; ~~~ 我的代码示例 这样, 就算我在代码中调用了两次steamroller函数. 还是只有最后一次调用的结果. 这就是闭包的魅力 资源汇总 题目提供的判断是否为数组的 Array.isArray() 代码中涉及到的 递归 递归 PS: 这里还对递归的缺点进行了讲解, 优化. 代码中涉及到的 闭包 闭包函数 o_o 原题中文版链接 https://www.freecodecamp.cn/challenges/steamroller 原题英文版链接 https://www.freecodecamp.com/challenges/steamroller 最后]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Write]]></title>
      <url>http://blog.zhinian.info/2016/12/04/Writing/</url>
      <content type="html"><![CDATA[Hexo的坑还是蛮多蛮多的markdown]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fcc 须知]]></title>
      <url>http://blog.zhinian.info/2016/12/04/Fcc/</url>
      <content type="html"><![CDATA[欢迎来到Fcc 闯关题 解析关于Fcc 以及它是何方神圣 &gt;.&lt; FreeCodeCamp 即是它的全称, 官方英文网址: https://www.freecodecamp.com/ 中文翻译官网: https://www.freecodecamp.cn/ FreeCodeCamp 是什么? 我们是一个帮助你学习编程的开源社区。 FreeCodeCamp如何帮助我学习编程？ 你可以通过我们的自学编程挑战，构建项目，获得证书，还可以参加在线下活动。 FreeCodeCamp 可以帮我获得一份软件工程师的工作吗？ 可以，数以百计的人在完成我们的编程挑战后获得了软件工程师的工作。 FreeCodeCamp 可以提供什么证书 FreeCodeCamp 提供4个认证证书，它们是：前端开发认证、数据可视化认证、后端开发认证、全栈开发认证。 FreeCodeCamp 彻底免费吗？ 是的，我们的课程、项目、证书全都是免费的。 以上信息来源于 FCC常见问题 我只是搬运工 :) 还只搬了一部分, 详情点上面链接. 捂脸 这里有什么 (⊙o⊙) 🤗 这里是有一些FCC上的题目解析, 有我当时遇到的问题, 也有其他FCC同学遇到的问题. 而这里, 我集中的放在一起, 是为了有需求查看时, 更好更快的search. 不敢说是多好的, 毕竟我也是前端小白一个. 只能说大家一起学习, 一起进步. 对于前端, 无论是工作需求还是兴趣爱好, 都是一个有趣, 有成就, 有收获的事情. 如何使用这个FCC闯关题 解析 ​ 首先, 自己要有 思考 过准备search的题, 确实发现自己的思路还没有头绪, 或者, 是觉得自己的思路并不是最好的, review 一下别的伙伴们的想法. 进而提升自己. 其次, 我也尽量用自己的语言组织好, 引导好, 授人以鱼不如授人以渔. 我更希望的是, 当你看完以后, 举一反三都不是问题~ 找到比我的解法还要好, 十分欢迎, 你可以通过点击左边侧栏的github, 进入issues提交, 以及左侧边栏的邮箱, QQ , 都是可以联系我, 我将会更新那道题的最优方案~ 并注明你的署名与版权. 如果在查看解析的时候, 还是遇到了问题, 除了上面 2 中联系方式, 还可以在文章最下面评论即可. 更有热心者, 你也可以自己完成一篇 Fcc算法题中常见的有人提问 的闯关题解析. 并以邮件. github issues. 或者qq 发给我, 格式可以为纯文本, 也可以是txt文件, 最好的格式是md 文件, 既markdown文件. 我会整理至博客中. 并注明你的署名与版权.​ How to do better走心啊 over]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://blog.zhinian.info/2016/12/04/hello-world/</url>
      <content type="html"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404 Not Found: 该网页无法显示]]></title>
      <url>http://blog.zhinian.info//404.html</url>
      <content type="html"></content>

    </entry>
    
    <entry>
      <title><![CDATA[三大究极问题之一:  我是谁?]]></title>
      <url>http://blog.zhinian.info/about/index.html</url>
      <content type="html"><![CDATA[路还长着呢Learn hexo 标题?]]></content>

    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://blog.zhinian.info/tags/index.html</url>
      <content type="html"></content>

    </entry>
    
  
</search>
